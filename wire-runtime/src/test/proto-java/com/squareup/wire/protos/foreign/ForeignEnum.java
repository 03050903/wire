// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: foreign.proto at 23:1
package com.squareup.wire.protos.foreign;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import java.lang.Override;

public enum ForeignEnum implements WireEnum {
  BAV(0),

  BAX(1);

  public static final ProtoAdapter<ForeignEnum> ADAPTER = new ProtoAdapter_ForeignEnum();

  private final int value;

  ForeignEnum(int value) {
    this.value = value;
  }

  /**
   * Return the constant for {@code value} or null.
   */
  public static ForeignEnum fromValue(int value) {
    switch (value) {
      case 0: return BAV;
      case 1: return BAX;
      default: return null;
    }
  }

  @Override
  public int getValue() {
    return value;
  }

  private static final class ProtoAdapter_ForeignEnum extends ProtoAdapter<ForeignEnum> {
    ProtoAdapter_ForeignEnum() {
      super(FieldEncoding.VARINT, ForeignEnum.class);
    }

    @Override
    public int encodedSize(ForeignEnum value) {
      return ProtoAdapter.varint32Size(value.getValue());
    }

    @Override
    public void encode(ProtoWriter writer, ForeignEnum value) {
      writer.writeVarint32(value.getValue());
    }

    @Override
    public ForeignEnum decode(ProtoReader reader) {
      int value = reader.readVarint32();
      ForeignEnum constant = ForeignEnum.fromValue(value);
      if (constant != null) return constant;
      throw new ProtoAdapter.EnumConstantNotFoundException(value, ForeignEnum.class);
    }
  }
}
