// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ../wire-runtime/src/test/proto/roots.proto at 69:1
package com.squareup.wire.protos.roots;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.TagMap;
import com.squareup.wire.WireField;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;

public final class I extends Message<I> {
  public static final ProtoAdapter<I> ADAPTER = ProtoAdapter.newMessageAdapter(I.class);

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_I = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer i;

  @WireField(
      tag = 1000,
      adapter = "com.squareup.wire.protos.roots.J#ADAPTER"
  )
  public final J j;

  public I(Integer i, J j) {
    this(i, j, TagMap.EMPTY);
  }

  public I(Integer i, J j, TagMap tagMap) {
    super(tagMap);
    this.i = i;
    this.j = j;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof I)) return false;
    I o = (I) other;
    return equals(tagMap(), o.tagMap())
        && equals(i, o.i)
        && equals(j, o.j);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = tagMap().hashCode();
      result = result * 37 + (i != null ? i.hashCode() : 0);
      result = result * 37 + (j != null ? j.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<I, Builder> {
    public Integer i;

    public J j;

    public Builder() {
    }

    public Builder(I message) {
      super(message);
      if (message == null) return;
      this.i = message.i;
      this.j = message.j;
    }

    public Builder i(Integer i) {
      this.i = i;
      return this;
    }

    public Builder j(J j) {
      this.j = j;
      return this;
    }

    @Override
    public I build() {
      return new I(i, j, buildTagMap());
    }
  }
}
