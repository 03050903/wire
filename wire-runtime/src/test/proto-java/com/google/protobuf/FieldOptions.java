// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: google/protobuf/descriptor.proto at 332:1
package com.google.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.protos.custom_options.FooBar;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class FieldOptions extends Message<FieldOptions, FieldOptions.Builder> {
  public static final ProtoAdapter<FieldOptions> ADAPTER = new ProtoAdapter<FieldOptions>(FieldEncoding.LENGTH_DELIMITED, FieldOptions.class) {
    @Override
    public int encodedSize(FieldOptions value) {
      return (value.ctype != null ? CType.ADAPTER.encodedSizeWithTag(1, value.ctype) : 0)
          + (value.packed != null ? ProtoAdapter.BOOL.encodedSizeWithTag(2, value.packed) : 0)
          + (value.deprecated != null ? ProtoAdapter.BOOL.encodedSizeWithTag(3, value.deprecated) : 0)
          + (value.experimental_map_key != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.experimental_map_key) : 0)
          + UninterpretedOption.ADAPTER.asRepeated().encodedSizeWithTag(999, value.uninterpreted_option)
          + (value.my_field_option_one != null ? ProtoAdapter.INT32.encodedSizeWithTag(60001, value.my_field_option_one) : 0)
          + (value.my_field_option_two != null ? ProtoAdapter.FLOAT.encodedSizeWithTag(60002, value.my_field_option_two) : 0)
          + (value.my_field_option_three != null ? FooBar.FooBarBazEnum.ADAPTER.encodedSizeWithTag(60003, value.my_field_option_three) : 0)
          + (value.my_field_option_four != null ? FooBar.ADAPTER.encodedSizeWithTag(60004, value.my_field_option_four) : 0)
          + (value.redacted != null ? ProtoAdapter.BOOL.encodedSizeWithTag(22200, value.redacted) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FieldOptions value) throws IOException {
      if (value.ctype != null) CType.ADAPTER.encodeWithTag(writer, 1, value.ctype);
      if (value.packed != null) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.packed);
      if (value.deprecated != null) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.deprecated);
      if (value.experimental_map_key != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.experimental_map_key);
      if (value.uninterpreted_option != null) UninterpretedOption.ADAPTER.asRepeated().encodeWithTag(writer, 999, value.uninterpreted_option);
      if (value.my_field_option_one != null) ProtoAdapter.INT32.encodeWithTag(writer, 60001, value.my_field_option_one);
      if (value.my_field_option_two != null) ProtoAdapter.FLOAT.encodeWithTag(writer, 60002, value.my_field_option_two);
      if (value.my_field_option_three != null) FooBar.FooBarBazEnum.ADAPTER.encodeWithTag(writer, 60003, value.my_field_option_three);
      if (value.my_field_option_four != null) FooBar.ADAPTER.encodeWithTag(writer, 60004, value.my_field_option_four);
      if (value.redacted != null) ProtoAdapter.BOOL.encodeWithTag(writer, 22200, value.redacted);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FieldOptions decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.ctype(CType.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.packed(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.deprecated(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.experimental_map_key(ProtoAdapter.STRING.decode(reader)); break;
          case 999: builder.uninterpreted_option.add(UninterpretedOption.ADAPTER.decode(reader)); break;
          case 60001: builder.my_field_option_one(ProtoAdapter.INT32.decode(reader)); break;
          case 60002: builder.my_field_option_two(ProtoAdapter.FLOAT.decode(reader)); break;
          case 60003: {
            try {
              builder.my_field_option_three(FooBar.FooBarBazEnum.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 60004: builder.my_field_option_four(FooBar.ADAPTER.decode(reader)); break;
          case 22200: builder.redacted(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FieldOptions redact(FieldOptions value) {
      Builder builder = value.newBuilder();
      redactElements(builder.uninterpreted_option, UninterpretedOption.ADAPTER);
      if (builder.my_field_option_four != null) builder.my_field_option_four = FooBar.ADAPTER.redact(builder.my_field_option_four);
      builder.clearUnknownFields();
      return builder.build();
    }
  };

  private static final long serialVersionUID = 0L;

  public static final CType DEFAULT_CTYPE = CType.STRING;

  public static final Boolean DEFAULT_PACKED = false;

  public static final Boolean DEFAULT_DEPRECATED = false;

  public static final String DEFAULT_EXPERIMENTAL_MAP_KEY = "";

  public static final Integer DEFAULT_MY_FIELD_OPTION_ONE = 0;

  public static final Float DEFAULT_MY_FIELD_OPTION_TWO = 0.0f;

  public static final FooBar.FooBarBazEnum DEFAULT_MY_FIELD_OPTION_THREE = FooBar.FooBarBazEnum.FOO;

  public static final Boolean DEFAULT_REDACTED = false;

  /**
   * The ctype option instructs the C++ code generator to use a different
   * representation of the field than it normally would.  See the specific
   * options below.  This option is not yet implemented in the open source
   * release -- sorry, we'll try to include it in a future version!
   */
  public final CType ctype;

  /**
   * The packed option can be enabled for repeated primitive fields to enable
   * a more efficient representation on the wire. Rather than repeatedly
   * writing the tag and type for each element, the entire array is encoded as
   * a single length-delimited blob.
   */
  public final Boolean packed;

  /**
   * Is this field deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for accessors, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating fields.
   */
  public final Boolean deprecated;

  /**
   * EXPERIMENTAL.  DO NOT USE.
   * For "map" fields, the name of the field in the enclosed type that
   * is the key for this map.  For example, suppose we have:
   *   message Item {
   *     required string name = 1;
   *     required string value = 2;
   *   }
   *   message Config {
   *     repeated Item items = 1 [experimental_map_key="name"];
   *   }
   * In this situation, the map key for Item will be set to "name".
   * TODO: Fully-implement this, then remove the "experimental_" prefix.
   */
  public final String experimental_map_key;

  /**
   * The parser stores options it doesn't recognize here. See above.
   */
  public final List<UninterpretedOption> uninterpreted_option;

  /**
   * Extension source: custom_options.proto at 64:3
   */
  public final Integer my_field_option_one;

  /**
   * Extension source: custom_options.proto at 65:3
   */
  public final Float my_field_option_two;

  /**
   * Extension source: custom_options.proto at 66:3
   */
  public final FooBar.FooBarBazEnum my_field_option_three;

  /**
   * Extension source: custom_options.proto at 67:3
   */
  public final FooBar my_field_option_four;

  /**
   * Fields marked with redacted are not to be logged, generally for PCI or PII.
   * Extension source: redacted_test.proto at 62:3
   */
  public final Boolean redacted;

  public FieldOptions(CType ctype, Boolean packed, Boolean deprecated, String experimental_map_key, List<UninterpretedOption> uninterpreted_option, Integer my_field_option_one, Float my_field_option_two, FooBar.FooBarBazEnum my_field_option_three, FooBar my_field_option_four, Boolean redacted) {
    this(ctype, packed, deprecated, experimental_map_key, uninterpreted_option, my_field_option_one, my_field_option_two, my_field_option_three, my_field_option_four, redacted, ByteString.EMPTY);
  }

  public FieldOptions(CType ctype, Boolean packed, Boolean deprecated, String experimental_map_key, List<UninterpretedOption> uninterpreted_option, Integer my_field_option_one, Float my_field_option_two, FooBar.FooBarBazEnum my_field_option_three, FooBar my_field_option_four, Boolean redacted, ByteString unknownFields) {
    super(unknownFields);
    this.ctype = ctype;
    this.packed = packed;
    this.deprecated = deprecated;
    this.experimental_map_key = experimental_map_key;
    this.uninterpreted_option = immutableCopyOf(uninterpreted_option);
    this.my_field_option_one = my_field_option_one;
    this.my_field_option_two = my_field_option_two;
    this.my_field_option_three = my_field_option_three;
    this.my_field_option_four = my_field_option_four;
    this.redacted = redacted;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.ctype = ctype;
    builder.packed = packed;
    builder.deprecated = deprecated;
    builder.experimental_map_key = experimental_map_key;
    builder.uninterpreted_option = copyOf(uninterpreted_option);
    builder.my_field_option_one = my_field_option_one;
    builder.my_field_option_two = my_field_option_two;
    builder.my_field_option_three = my_field_option_three;
    builder.my_field_option_four = my_field_option_four;
    builder.redacted = redacted;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FieldOptions)) return false;
    FieldOptions o = (FieldOptions) other;
    return equals(unknownFields(), o.unknownFields())
        && equals(ctype, o.ctype)
        && equals(packed, o.packed)
        && equals(deprecated, o.deprecated)
        && equals(experimental_map_key, o.experimental_map_key)
        && equals(uninterpreted_option, o.uninterpreted_option)
        && equals(my_field_option_one, o.my_field_option_one)
        && equals(my_field_option_two, o.my_field_option_two)
        && equals(my_field_option_three, o.my_field_option_three)
        && equals(my_field_option_four, o.my_field_option_four)
        && equals(redacted, o.redacted);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (ctype != null ? ctype.hashCode() : 0);
      result = result * 37 + (packed != null ? packed.hashCode() : 0);
      result = result * 37 + (deprecated != null ? deprecated.hashCode() : 0);
      result = result * 37 + (experimental_map_key != null ? experimental_map_key.hashCode() : 0);
      result = result * 37 + (uninterpreted_option != null ? uninterpreted_option.hashCode() : 1);
      result = result * 37 + (my_field_option_one != null ? my_field_option_one.hashCode() : 0);
      result = result * 37 + (my_field_option_two != null ? my_field_option_two.hashCode() : 0);
      result = result * 37 + (my_field_option_three != null ? my_field_option_three.hashCode() : 0);
      result = result * 37 + (my_field_option_four != null ? my_field_option_four.hashCode() : 0);
      result = result * 37 + (redacted != null ? redacted.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (ctype != null) builder.append(", ctype=").append(ctype);
    if (packed != null) builder.append(", packed=").append(packed);
    if (deprecated != null) builder.append(", deprecated=").append(deprecated);
    if (experimental_map_key != null) builder.append(", experimental_map_key=").append(experimental_map_key);
    if (uninterpreted_option != null) builder.append(", uninterpreted_option=").append(uninterpreted_option);
    if (my_field_option_one != null) builder.append(", my_field_option_one=").append(my_field_option_one);
    if (my_field_option_two != null) builder.append(", my_field_option_two=").append(my_field_option_two);
    if (my_field_option_three != null) builder.append(", my_field_option_three=").append(my_field_option_three);
    if (my_field_option_four != null) builder.append(", my_field_option_four=").append(my_field_option_four);
    if (redacted != null) builder.append(", redacted=").append(redacted);
    return builder.replace(0, 2, "FieldOptions{").append('}').toString();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<FieldOptions, Builder> {
    public CType ctype;

    public Boolean packed;

    public Boolean deprecated;

    public String experimental_map_key;

    public List<UninterpretedOption> uninterpreted_option;

    public Integer my_field_option_one;

    public Float my_field_option_two;

    public FooBar.FooBarBazEnum my_field_option_three;

    public FooBar my_field_option_four;

    public Boolean redacted;

    public Builder() {
      uninterpreted_option = newMutableList();
    }

    /**
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     */
    public Builder ctype(CType ctype) {
      this.ctype = ctype;
      return this;
    }

    /**
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob.
     */
    public Builder packed(Boolean packed) {
      this.packed = packed;
      return this;
    }

    /**
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     */
    public Builder deprecated(Boolean deprecated) {
      this.deprecated = deprecated;
      return this;
    }

    /**
     * EXPERIMENTAL.  DO NOT USE.
     * For "map" fields, the name of the field in the enclosed type that
     * is the key for this map.  For example, suppose we have:
     *   message Item {
     *     required string name = 1;
     *     required string value = 2;
     *   }
     *   message Config {
     *     repeated Item items = 1 [experimental_map_key="name"];
     *   }
     * In this situation, the map key for Item will be set to "name".
     * TODO: Fully-implement this, then remove the "experimental_" prefix.
     */
    public Builder experimental_map_key(String experimental_map_key) {
      this.experimental_map_key = experimental_map_key;
      return this;
    }

    /**
     * The parser stores options it doesn't recognize here. See above.
     */
    public Builder uninterpreted_option(List<UninterpretedOption> uninterpreted_option) {
      checkElementsNotNull(uninterpreted_option);
      this.uninterpreted_option = uninterpreted_option;
      return this;
    }

    public Builder my_field_option_one(Integer my_field_option_one) {
      this.my_field_option_one = my_field_option_one;
      return this;
    }

    public Builder my_field_option_two(Float my_field_option_two) {
      this.my_field_option_two = my_field_option_two;
      return this;
    }

    public Builder my_field_option_three(FooBar.FooBarBazEnum my_field_option_three) {
      this.my_field_option_three = my_field_option_three;
      return this;
    }

    public Builder my_field_option_four(FooBar my_field_option_four) {
      this.my_field_option_four = my_field_option_four;
      return this;
    }

    /**
     * Fields marked with redacted are not to be logged, generally for PCI or PII.
     */
    public Builder redacted(Boolean redacted) {
      this.redacted = redacted;
      return this;
    }

    @Override
    public FieldOptions build() {
      return new FieldOptions(ctype, packed, deprecated, experimental_map_key, uninterpreted_option, my_field_option_one, my_field_option_two, my_field_option_three, my_field_option_four, redacted, buildUnknownFields());
    }
  }

  public enum CType implements WireEnum {
    /**
     * Default mode.
     */
    STRING(0),

    CORD(1),

    STRING_PIECE(2);

    public static final ProtoAdapter<CType> ADAPTER = ProtoAdapter.newEnumAdapter(CType.class);

    private final int value;

    CType(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static CType fromValue(int value) {
      switch (value) {
        case 0: return STRING;
        case 1: return CORD;
        case 2: return STRING_PIECE;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }
}
